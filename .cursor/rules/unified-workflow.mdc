---
alwaysApply: true
description: 통합된 개발 워크플로우
---

# 통합 개발 워크플로우 규칙

## 🚀 일반 개발 프로세스

### 1. 기능 개발 워크플로우
- [ ] 요구사항 분석 및 명세 작성
- [ ] 설계 및 아키텍처 검토
- [ ] 개발 환경 설정 확인
- [ ] 코드 구현 및 단위 테스트 작성
- [ ] 통합 테스트 및 검증
- [ ] 코드 리뷰 및 품질 검사
- [ ] 커밋 메시지 작성 및 커밋
- [ ] 문서화 및 배포 준비

### 2. 버그 수정 워크플로우
- [ ] 버그 리포트 분석 및 재현
- [ ] 원인 분석 및 영향도 평가
- [ ] 수정 방안 설계
- [ ] 코드 수정 및 테스트
- [ ] 회귀 테스트 수행
- [ ] 커밋 메시지 작성 및 커밋
- [ ] 수정 사항 검증 및 배포

### 3. 리팩토링 워크플로우
- [ ] 리팩토링 대상 식별
- [ ] 현재 코드 분석 및 문제점 파악
- [ ] 개선 방안 설계
- [ ] 단계별 리팩토링 실행
- [ ] 테스트 커버리지 유지
- [ ] 성능 및 품질 검증
- [ ] 커밋 메시지 작성 및 커밋

## 📋 통합 작업 체크리스트

### 새 기능 개발 시
- [ ] 브랜치 생성 및 작업 환경 준비
- [ ] 요구사항 명확히 이해
- [ ] 설계 문서 작성 또는 업데이트
- [ ] 코드 구현 및 테스트 작성
- [ ] 코드 리뷰 요청
- [ ] 통합 테스트 통과 확인
- [ ] 문서 업데이트
- [ ] 커밋 메시지 작성 및 커밋
- [ ] 배포 준비 및 실행

### 코드 리뷰 시
- [ ] 코드 품질 및 스타일 검토
- [ ] 로직 정확성 확인
- [ ] 성능 및 보안 검토
- [ ] 테스트 커버리지 확인
- [ ] 문서화 상태 검토
- [ ] 의존성 및 호환성 확인

## 📝 커밋 메시지 작성 가이드라인

### 커밋 메시지 구조
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 커밋 타입 (Type)
- **feat**: 새로운 기능 추가
- **fix**: 버그 수정
- **docs**: 문서 수정
- **style**: 코드 포맷팅, 세미콜론 누락 등 (기능 변경 없음)
- **refactor**: 코드 리팩토링
- **test**: 테스트 코드 추가 또는 수정
- **chore**: 빌드 프로세스 또는 보조 도구 변경
- **perf**: 성능 개선
- **ci**: CI/CD 설정 변경
- **build**: 빌드 시스템 또는 외부 종속성 변경

### 커밋 메시지 작성 규칙

#### 제목 (Subject) 작성 규칙
- [ ] 50자 이내로 작성
- [ ] 첫 글자는 소문자로 시작
- [ ] 마침표로 끝내지 않음
- [ ] 명령형 현재 시제 사용 (add, fix, update 등)
- [ ] 무엇을 했는지 명확히 표현

#### 본문 (Body) 작성 규칙
- [ ] 72자 이내로 줄바꿈
- [ ] 무엇을, 왜 변경했는지 설명
- [ ] 이전 동작과의 차이점 명시
- [ ] 관련 이슈 번호 참조

#### 푸터 (Footer) 작성 규칙
- [ ] 관련 이슈 번호 포함 (Fixes #123, Closes #456)
- [ ] Breaking Changes 명시
- [ ] 관련 문서 링크 포함

### 커밋 메시지 예시

#### 기능 추가
```
feat(controller): GPS 좌표 변환 기능 추가

- WGS84에서 TM 좌표계로 변환하는 함수 구현
- 좌표 변환 정확도 검증 테스트 추가
- 변환 결과를 로그로 출력하는 기능 포함

Fixes #123
```

#### 버그 수정
```
fix(mqtt): MQTT 연결 끊김 시 재연결 로직 개선

- 연결 끊김 감지 후 5초 대기 후 재연결 시도
- 최대 3회 재연결 시도 후 에러 처리
- 재연결 상태를 UI에 표시하는 기능 추가

Closes #456
```

#### 리팩토링
```
refactor(ui): 메인 윈도우 클래스 구조 개선

- UI 컴포넌트들을 별도 클래스로 분리
- 이벤트 핸들러 메서드 정리
- 코드 가독성 향상을 위한 주석 추가

Related to #789
```

#### 문서 업데이트
```
docs(readme): 설치 및 설정 가이드 업데이트

- ROS 환경 설정 단계 추가
- MQTT 브로커 연결 방법 상세 설명
- 트러블슈팅 섹션 추가

Closes #101
```

### 커밋 전 체크리스트
- [ ] 변경사항이 논리적으로 하나의 단위인지 확인
- [ ] 불필요한 파일이 포함되지 않았는지 확인
- [ ] 테스트가 통과하는지 확인
- [ ] 커밋 메시지가 명확하고 이해하기 쉬운지 확인
- [ ] 관련 이슈 번호가 포함되었는지 확인

### 배포 전 체크리스트
- [ ] 모든 테스트 통과 확인
- [ ] 코드 리뷰 완료
- [ ] 문서 업데이트 완료
- [ ] 환경 설정 확인
- [ ] 백업 및 롤백 계획 수립
- [ ] 배포 스크립트 검증
- [ ] 모니터링 설정 확인

## 🔄 반복 작업 프로세스

### 일반 일일 개발 루틴
- [ ] 이전 작업 상태 확인
- [ ] 우선순위 업데이트
- [ ] 개발 환경 상태 점검
- [ ] 진행 중인 작업 계속
- [ ] 일일 진행상황 기록
- [ ] 다음 날 계획 수립

### 일반 주간 리뷰 프로세스
- [ ] 주간 목표 달성도 평가
- [ ] 코드 품질 메트릭 검토
- [ ] 기술 부채 정리
- [ ] 다음 주 계획 수립
- [ ] 팀 협업 이슈 검토

## 📊 품질 관리

### 코드 품질 메트릭
- [ ] 테스트 커버리지 80% 이상 유지
- [ ] 코드 복잡도 관리 (McCabe 복잡도 < 10)
- [ ] 중복 코드 제거
- [ ] 메모리 누수 방지
- [ ] 성능 병목 지점 모니터링

### 문서화 표준
- [ ] README 파일 최신 상태 유지
- [ ] API 문서 자동 생성
- [ ] 설치 및 설정 가이드 제공
- [ ] 트러블슈팅 가이드 작성
- [ ] 변경 이력 관리

## 🛠️ 도구 및 환경

### 일반 개발 도구 체크리스트
- [ ] IDE 설정 및 플러그인 확인
- [ ] 린터 및 포매터 설정
- [ ] 디버거 설정 확인
- [ ] 버전 관리 도구 설정
- [ ] CI/CD 파이프라인 상태 확인
- [ ] Python 가상환경 활성화

## 📈 성능 모니터링

### 성능 지표 추적
- [ ] 응답 시간 모니터링
- [ ] 메모리 사용량 추적
- [ ] CPU 사용률 확인
- [ ] 네트워크 통신량 측정
- [ ] 에러율 및 예외 발생률 추적

### 최적화 프로세스
- [ ] 성능 병목 지점 식별
- [ ] 최적화 방안 설계
- [ ] A/B 테스트 수행
- [ ] 성능 개선 효과 측정
- [ ] 최적화 결과 문서화

## 🔒 보안 프로세스

### 보안 검토 체크리스트
- [ ] 입력 검증 로직 확인
- [ ] 인증 및 권한 관리 검토
- [ ] 데이터 암호화 상태 확인
- [ ] 로그 보안 검토
- [ ] 네트워크 보안 설정 확인

### 취약점 관리
- [ ] 정기적인 보안 스캔 수행
- [ ] 의존성 취약점 확인
- [ ] 보안 패치 적용
- [ ] 보안 이벤트 대응 계획 수립
- [ ] 보안 교육 및 인식 제고

## 📚 참고 자료

### 프로젝트 파일
- 메인 실행 파일: [main.py](mdc:main.py)
- 의존성 목록: [requirements.txt](mdc:requirements.txt)
- 환경 변수 예시: [env.example](mdc:env.example)

### 테스트 파일
- 테스트 디렉토리: [test/](mdc:test/)
