---
alwaysApply: true
description: 투두리스트 기반 시퀀셜씽킹 규칙
globs:
---

# 투두리스트 기반 시퀀셜씽킹 규칙

## 🧠 사고 프로세스 가이드라인

### 1. 문제 분석 단계 (Problem Analysis)
- [ ] 요청사항을 정확히 파악하고 명확히 정의
- [ ] 현재 상황과 목표 상태를 비교 분석
- [ ] 제약사항과 우선순위를 식별
- [ ] 필요한 정보나 리소스를 파악
- [ ] 문제의 복잡도를 평가

### 2. 계획 수립 단계 (Planning)
- [ ] 해결 방법을 단계별로 분해
- [ ] 각 단계의 의존성을 파악
- [ ] 예상되는 문제점과 대안을 고려
- [ ] 실행 순서를 최적화
- [ ] 시간 추정 및 리소스 할당

### 3. 실행 단계 (Execution)
- [ ] 각 단계를 순차적으로 실행
- [ ] 중간 결과를 검증하고 필요시 계획 조정
- [ ] 예상치 못한 문제 발생시 대응 방안 적용
- [ ] 진행 상황을 지속적으로 모니터링
- [ ] 단계별 완료 체크

### 4. 검증 및 완료 단계 (Verification)
- [ ] 최종 결과가 요구사항을 만족하는지 확인
- [ ] 코드 품질과 성능을 검토
- [ ] 문서화 및 주석 추가
- [ ] 다음 단계나 개선사항을 제안
- [ ] 학습한 내용을 기록

## 📋 투두리스트 템플릿

### 코드 작성 시 체크리스트
- [ ] 요구사항 분석 완료
- [ ] 설계 및 아키텍처 결정
- [ ] 필요한 라이브러리/의존성 확인
- [ ] 코드 구현
- [ ] 테스트 코드 작성
- [ ] 에러 처리 및 예외 상황 고려
- [ ] 코드 리뷰 및 최적화
- [ ] 문서화 및 주석 추가

### 디버깅 시 체크리스트
- [ ] 문제 현상 정확히 파악
- [ ] 로그 및 에러 메시지 분석
- [ ] 재현 가능한 테스트 케이스 작성
- [ ] 원인 분석 및 가설 설정
- [ ] 수정 방안 구현
- [ ] 수정 결과 검증
- [ ] 유사한 문제가 다른 곳에 있는지 확인

### 리팩토링 시 체크리스트
- [ ] 리팩토링 대상 식별
- [ ] 현재 코드 분석 및 문제점 파악
- [ ] 개선 방안 설계
- [ ] 단계별 리팩토링 실행
- [ ] 테스트 커버리지 유지
- [ ] 성능 및 품질 검증

## 🎯 프로젝트 특화 규칙


## 💡 사고 과정 기록 형식

각 작업을 수행할 때 다음 형식으로 사고 과정을 기록하세요:

```
🤔 문제 분석:
- 현재 상황: [상황 설명]
- 목표: [목표 설명]
- 제약사항: [제약사항 나열]
- 복잡도: [높음/중간/낮음]

📝 계획 수립:
1. [첫 번째 단계]
2. [두 번째 단계]
3. [세 번째 단계]
4. [예상 소요 시간]

✅ 실행 과정:
- 단계 1 완료: [결과]
- 단계 2 완료: [결과]
- 단계 3 완료: [결과]
- 예상치 못한 문제: [문제 및 해결방안]

🔍 검증 결과:
- 요구사항 만족도: [확인 결과]
- 개선사항: [제안사항]
- 학습 내용: [새로 알게 된 것]
```

## ⚠️ 주의사항

1. **순차적 사고**: 한 번에 여러 작업을 동시에 처리하지 말고, 단계별로 진행
2. **검증 필수**: 각 단계 완료 후 결과를 반드시 검증
3. **문서화**: 중요한 결정사항이나 로직은 주석으로 문서화
4. **에러 처리**: 예외 상황을 항상 고려하고 적절한 에러 처리 구현
5. **사용자 피드백**: UI 변경 시 사용자 경험을 고려
6. **학습 기록**: 새로운 지식이나 패턴을 발견하면 기록

## 🔄 반복 개선 프로세스

### 일일 리뷰
- [ ] 오늘 완료한 작업들 체크
- [ ] 어려웠던 부분과 해결방안 기록
- [ ] 개선이 필요한 부분 식별
- [ ] 내일의 우선순위 설정

### 주간 리뷰
- [ ] 주간 목표 달성도 평가
- [ ] 반복되는 문제 패턴 분석
- [ ] 프로세스 개선점 도출
- [ ] 다음 주 계획 수립
